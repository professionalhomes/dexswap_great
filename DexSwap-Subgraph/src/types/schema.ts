// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DexswapFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DexswapFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DexswapFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DexswapFactory", id.toString(), this);
  }

  static load(id: string): DexswapFactory | null {
    return store.get("DexswapFactory", id) as DexswapFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairCount(): i32 {
    let value = this.get("pairCount");
    return value.toI32();
  }

  set pairCount(value: i32) {
    this.set("pairCount", Value.fromI32(value));
  }

  get totalVolumeBADGER(): BigDecimal {
    let value = this.get("totalVolumeBADGER");
    return value.toBigDecimal();
  }

  set totalVolumeBADGER(value: BigDecimal) {
    this.set("totalVolumeBADGER", Value.fromBigDecimal(value));
  }

  get totalVolumeNativeCurrency(): BigDecimal {
    let value = this.get("totalVolumeNativeCurrency");
    return value.toBigDecimal();
  }

  set totalVolumeNativeCurrency(value: BigDecimal) {
    this.set("totalVolumeNativeCurrency", Value.fromBigDecimal(value));
  }

  get untrackedVolumeBADGER(): BigDecimal {
    let value = this.get("untrackedVolumeBADGER");
    return value.toBigDecimal();
  }

  set untrackedVolumeBADGER(value: BigDecimal) {
    this.set("untrackedVolumeBADGER", Value.fromBigDecimal(value));
  }

  get totalLiquidityBADGER(): BigDecimal {
    let value = this.get("totalLiquidityBADGER");
    return value.toBigDecimal();
  }

  set totalLiquidityBADGER(value: BigDecimal) {
    this.set("totalLiquidityBADGER", Value.fromBigDecimal(value));
  }

  get totalLiquidityNativeCurrency(): BigDecimal {
    let value = this.get("totalLiquidityNativeCurrency");
    return value.toBigDecimal();
  }

  set totalLiquidityNativeCurrency(value: BigDecimal) {
    this.set("totalLiquidityNativeCurrency", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tradeVolume(): BigDecimal {
    let value = this.get("tradeVolume");
    return value.toBigDecimal();
  }

  set tradeVolume(value: BigDecimal) {
    this.set("tradeVolume", Value.fromBigDecimal(value));
  }

  get tradeVolumeBADGER(): BigDecimal {
    let value = this.get("tradeVolumeBADGER");
    return value.toBigDecimal();
  }

  set tradeVolumeBADGER(value: BigDecimal) {
    this.set("tradeVolumeBADGER", Value.fromBigDecimal(value));
  }

  get untrackedVolumeBADGER(): BigDecimal {
    let value = this.get("untrackedVolumeBADGER");
    return value.toBigDecimal();
  }

  set untrackedVolumeBADGER(value: BigDecimal) {
    this.set("untrackedVolumeBADGER", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get derivedNativeCurrency(): BigDecimal | null {
    let value = this.get("derivedNativeCurrency");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set derivedNativeCurrency(value: BigDecimal | null) {
    if (value === null) {
      this.unset("derivedNativeCurrency");
    } else {
      this.set(
        "derivedNativeCurrency",
        Value.fromBigDecimal(value as BigDecimal)
      );
    }
  }

  get tokenDayData(): Array<string> {
    let value = this.get("tokenDayData");
    return value.toStringArray();
  }

  set tokenDayData(value: Array<string>) {
    this.set("tokenDayData", Value.fromStringArray(value));
  }

  get pairDayDataBase(): Array<string> {
    let value = this.get("pairDayDataBase");
    return value.toStringArray();
  }

  set pairDayDataBase(value: Array<string>) {
    this.set("pairDayDataBase", Value.fromStringArray(value));
  }

  get pairDayDataQuote(): Array<string> {
    let value = this.get("pairDayDataQuote");
    return value.toStringArray();
  }

  set pairDayDataQuote(value: Array<string>) {
    this.set("pairDayDataQuote", Value.fromStringArray(value));
  }

  get pairBase(): Array<string> {
    let value = this.get("pairBase");
    return value.toStringArray();
  }

  set pairBase(value: Array<string>) {
    this.set("pairBase", Value.fromStringArray(value));
  }

  get pairQuote(): Array<string> {
    let value = this.get("pairQuote");
    return value.toStringArray();
  }

  set pairQuote(value: Array<string>) {
    this.set("pairQuote", Value.fromStringArray(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get reserveNativeCurrency(): BigDecimal {
    let value = this.get("reserveNativeCurrency");
    return value.toBigDecimal();
  }

  set reserveNativeCurrency(value: BigDecimal) {
    this.set("reserveNativeCurrency", Value.fromBigDecimal(value));
  }

  get reserveBADGER(): BigDecimal {
    let value = this.get("reserveBADGER");
    return value.toBigDecimal();
  }

  set reserveBADGER(value: BigDecimal) {
    this.set("reserveBADGER", Value.fromBigDecimal(value));
  }

  get trackedReserveNativeCurrency(): BigDecimal {
    let value = this.get("trackedReserveNativeCurrency");
    return value.toBigDecimal();
  }

  set trackedReserveNativeCurrency(value: BigDecimal) {
    this.set("trackedReserveNativeCurrency", Value.fromBigDecimal(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeBADGER(): BigDecimal {
    let value = this.get("volumeBADGER");
    return value.toBigDecimal();
  }

  set volumeBADGER(value: BigDecimal) {
    this.set("volumeBADGER", Value.fromBigDecimal(value));
  }

  get untrackedVolumeBADGER(): BigDecimal {
    let value = this.get("untrackedVolumeBADGER");
    return value.toBigDecimal();
  }

  set untrackedVolumeBADGER(value: BigDecimal) {
    this.set("untrackedVolumeBADGER", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }

  get pairHourData(): Array<string> {
    let value = this.get("pairHourData");
    return value.toStringArray();
  }

  set pairHourData(value: Array<string>) {
    this.set("pairHourData", Value.fromStringArray(value));
  }

  get liquidityPositions(): Array<string> {
    let value = this.get("liquidityPositions");
    return value.toStringArray();
  }

  set liquidityPositions(value: Array<string>) {
    this.set("liquidityPositions", Value.fromStringArray(value));
  }

  get liquidityMiningCampaigns(): Array<string> {
    let value = this.get("liquidityMiningCampaigns");
    return value.toStringArray();
  }

  set liquidityMiningCampaigns(value: Array<string>) {
    this.set("liquidityMiningCampaigns", Value.fromStringArray(value));
  }

  get liquidityPositionSnapshots(): Array<string> {
    let value = this.get("liquidityPositionSnapshots");
    return value.toStringArray();
  }

  set liquidityPositionSnapshots(value: Array<string>) {
    this.set("liquidityPositionSnapshots", Value.fromStringArray(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPositions(): Array<string> | null {
    let value = this.get("liquidityPositions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityPositions(value: Array<string> | null) {
    if (value === null) {
      this.unset("liquidityPositions");
    } else {
      this.set(
        "liquidityPositions",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get badgerSwapped(): BigDecimal {
    let value = this.get("badgerSwapped");
    return value.toBigDecimal();
  }

  set badgerSwapped(value: BigDecimal) {
    this.set("badgerSwapped", Value.fromBigDecimal(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get liquidityTokenBalance(): BigDecimal {
    let value = this.get("liquidityTokenBalance");
    return value.toBigDecimal();
  }

  set liquidityTokenBalance(value: BigDecimal) {
    this.set("liquidityTokenBalance", Value.fromBigDecimal(value));
  }
}

export class LiquidityMiningPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityMiningPosition entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityMiningPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityMiningPosition", id.toString(), this);
  }

  static load(id: string): LiquidityMiningPosition | null {
    return store.get(
      "LiquidityMiningPosition",
      id
    ) as LiquidityMiningPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get targetedPair(): string {
    let value = this.get("targetedPair");
    return value.toString();
  }

  set targetedPair(value: string) {
    this.set("targetedPair", Value.fromString(value));
  }

  get stakedAmount(): BigDecimal {
    let value = this.get("stakedAmount");
    return value.toBigDecimal();
  }

  set stakedAmount(value: BigDecimal) {
    this.set("stakedAmount", Value.fromBigDecimal(value));
  }

  get liquidityMiningCampaign(): string {
    let value = this.get("liquidityMiningCampaign");
    return value.toString();
  }

  set liquidityMiningCampaign(value: string) {
    this.set("liquidityMiningCampaign", Value.fromString(value));
  }
}

export class LiquidityPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityPositionSnapshot entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPositionSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPositionSnapshot", id.toString(), this);
  }

  static load(id: string): LiquidityPositionSnapshot | null {
    return store.get(
      "LiquidityPositionSnapshot",
      id
    ) as LiquidityPositionSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPosition(): string {
    let value = this.get("liquidityPosition");
    return value.toString();
  }

  set liquidityPosition(value: string) {
    this.set("liquidityPosition", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get block(): i32 {
    let value = this.get("block");
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get token0PriceBADGER(): BigDecimal {
    let value = this.get("token0PriceBADGER");
    return value.toBigDecimal();
  }

  set token0PriceBADGER(value: BigDecimal) {
    this.set("token0PriceBADGER", Value.fromBigDecimal(value));
  }

  get token1PriceBADGER(): BigDecimal {
    let value = this.get("token1PriceBADGER");
    return value.toBigDecimal();
  }

  set token1PriceBADGER(value: BigDecimal) {
    this.set("token1PriceBADGER", Value.fromBigDecimal(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get reserveBADGER(): BigDecimal {
    let value = this.get("reserveBADGER");
    return value.toBigDecimal();
  }

  set reserveBADGER(value: BigDecimal) {
    this.set("reserveBADGER", Value.fromBigDecimal(value));
  }

  get liquidityTokenTotalSupply(): BigDecimal {
    let value = this.get("liquidityTokenTotalSupply");
    return value.toBigDecimal();
  }

  set liquidityTokenTotalSupply(value: BigDecimal) {
    this.set("liquidityTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get liquidityTokenBalance(): BigDecimal {
    let value = this.get("liquidityTokenBalance");
    return value.toBigDecimal();
  }

  set liquidityTokenBalance(value: BigDecimal) {
    this.set("liquidityTokenBalance", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get mints(): Array<string | null> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string | null>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string | null> {
    let value = this.get("burns");
    return value.toStringArray();
  }

  set burns(value: Array<string | null>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Mint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Mint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Mint", id.toString(), this);
  }

  static load(id: string): Mint | null {
    return store.get("Mint", id) as Mint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount0(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get amount1(): BigDecimal | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount1(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountBADGER(): BigDecimal | null {
    let value = this.get("amountBADGER");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountBADGER(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountBADGER");
    } else {
      this.set("amountBADGER", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get feeTo(): Bytes | null {
    let value = this.get("feeTo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeTo(value: Bytes | null) {
    if (value === null) {
      this.unset("feeTo");
    } else {
      this.set("feeTo", Value.fromBytes(value as Bytes));
    }
  }

  get feeLiquidity(): BigDecimal | null {
    let value = this.get("feeLiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeLiquidity(value: BigDecimal | null) {
    if (value === null) {
      this.unset("feeLiquidity");
    } else {
      this.set("feeLiquidity", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burn", id.toString(), this);
  }

  static load(id: string): Burn | null {
    return store.get("Burn", id) as Burn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount0(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get amount1(): BigDecimal | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount1(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(value as Bytes));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountBADGER(): BigDecimal | null {
    let value = this.get("amountBADGER");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountBADGER(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountBADGER");
    } else {
      this.set("amountBADGER", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get needsComplete(): boolean {
    let value = this.get("needsComplete");
    return value.toBoolean();
  }

  set needsComplete(value: boolean) {
    this.set("needsComplete", Value.fromBoolean(value));
  }

  get feeTo(): Bytes | null {
    let value = this.get("feeTo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeTo(value: Bytes | null) {
    if (value === null) {
      this.unset("feeTo");
    } else {
      this.set("feeTo", Value.fromBytes(value as Bytes));
    }
  }

  get feeLiquidity(): BigDecimal | null {
    let value = this.get("feeLiquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeLiquidity(value: BigDecimal | null) {
    if (value === null) {
      this.unset("feeLiquidity");
    } else {
      this.set("feeLiquidity", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amount0In(): BigDecimal {
    let value = this.get("amount0In");
    return value.toBigDecimal();
  }

  set amount0In(value: BigDecimal) {
    this.set("amount0In", Value.fromBigDecimal(value));
  }

  get amount1In(): BigDecimal {
    let value = this.get("amount1In");
    return value.toBigDecimal();
  }

  set amount1In(value: BigDecimal) {
    this.set("amount1In", Value.fromBigDecimal(value));
  }

  get amount0Out(): BigDecimal {
    let value = this.get("amount0Out");
    return value.toBigDecimal();
  }

  set amount0Out(value: BigDecimal) {
    this.set("amount0Out", Value.fromBigDecimal(value));
  }

  get amount1Out(): BigDecimal {
    let value = this.get("amount1Out");
    return value.toBigDecimal();
  }

  set amount1Out(value: BigDecimal) {
    this.set("amount1Out", Value.fromBigDecimal(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountBADGER(): BigDecimal {
    let value = this.get("amountBADGER");
    return value.toBigDecimal();
  }

  set amountBADGER(value: BigDecimal) {
    this.set("amountBADGER", Value.fromBigDecimal(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bundle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bundle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bundle", id.toString(), this);
  }

  static load(id: string): Bundle | null {
    return store.get("Bundle", id) as Bundle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nativeCurrencyPrice(): BigDecimal {
    let value = this.get("nativeCurrencyPrice");
    return value.toBigDecimal();
  }

  set nativeCurrencyPrice(value: BigDecimal) {
    this.set("nativeCurrencyPrice", Value.fromBigDecimal(value));
  }
}

export class DexswapDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DexswapDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DexswapDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DexswapDayData", id.toString(), this);
  }

  static load(id: string): DexswapDayData | null {
    return store.get("DexswapDayData", id) as DexswapDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeNativeCurrency(): BigDecimal {
    let value = this.get("dailyVolumeNativeCurrency");
    return value.toBigDecimal();
  }

  set dailyVolumeNativeCurrency(value: BigDecimal) {
    this.set("dailyVolumeNativeCurrency", Value.fromBigDecimal(value));
  }

  get dailyVolumeBADGER(): BigDecimal {
    let value = this.get("dailyVolumeBADGER");
    return value.toBigDecimal();
  }

  set dailyVolumeBADGER(value: BigDecimal) {
    this.set("dailyVolumeBADGER", Value.fromBigDecimal(value));
  }

  get dailyVolumeUntracked(): BigDecimal {
    let value = this.get("dailyVolumeUntracked");
    return value.toBigDecimal();
  }

  set dailyVolumeUntracked(value: BigDecimal) {
    this.set("dailyVolumeUntracked", Value.fromBigDecimal(value));
  }

  get totalVolumeNativeCurrency(): BigDecimal {
    let value = this.get("totalVolumeNativeCurrency");
    return value.toBigDecimal();
  }

  set totalVolumeNativeCurrency(value: BigDecimal) {
    this.set("totalVolumeNativeCurrency", Value.fromBigDecimal(value));
  }

  get totalLiquidityNativeCurrency(): BigDecimal {
    let value = this.get("totalLiquidityNativeCurrency");
    return value.toBigDecimal();
  }

  set totalLiquidityNativeCurrency(value: BigDecimal) {
    this.set("totalLiquidityNativeCurrency", Value.fromBigDecimal(value));
  }

  get totalVolumeBADGER(): BigDecimal {
    let value = this.get("totalVolumeBADGER");
    return value.toBigDecimal();
  }

  set totalVolumeBADGER(value: BigDecimal) {
    this.set("totalVolumeBADGER", Value.fromBigDecimal(value));
  }

  get totalLiquidityBADGER(): BigDecimal {
    let value = this.get("totalLiquidityBADGER");
    return value.toBigDecimal();
  }

  set totalLiquidityBADGER(value: BigDecimal) {
    this.set("totalLiquidityBADGER", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class PairHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairHourData", id.toString(), this);
  }

  static load(id: string): PairHourData | null {
    return store.get("PairHourData", id) as PairHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get reserveBADGER(): BigDecimal {
    let value = this.get("reserveBADGER");
    return value.toBigDecimal();
  }

  set reserveBADGER(value: BigDecimal) {
    this.set("reserveBADGER", Value.fromBigDecimal(value));
  }

  get hourlyVolumeToken0(): BigDecimal {
    let value = this.get("hourlyVolumeToken0");
    return value.toBigDecimal();
  }

  set hourlyVolumeToken0(value: BigDecimal) {
    this.set("hourlyVolumeToken0", Value.fromBigDecimal(value));
  }

  get hourlyVolumeToken1(): BigDecimal {
    let value = this.get("hourlyVolumeToken1");
    return value.toBigDecimal();
  }

  set hourlyVolumeToken1(value: BigDecimal) {
    this.set("hourlyVolumeToken1", Value.fromBigDecimal(value));
  }

  get hourlyVolumeBADGER(): BigDecimal {
    let value = this.get("hourlyVolumeBADGER");
    return value.toBigDecimal();
  }

  set hourlyVolumeBADGER(value: BigDecimal) {
    this.set("hourlyVolumeBADGER", Value.fromBigDecimal(value));
  }

  get hourlyTxns(): BigInt {
    let value = this.get("hourlyTxns");
    return value.toBigInt();
  }

  set hourlyTxns(value: BigInt) {
    this.set("hourlyTxns", Value.fromBigInt(value));
  }
}

export class PairDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairDayData", id.toString(), this);
  }

  static load(id: string): PairDayData | null {
    return store.get("PairDayData", id) as PairDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pairAddress(): Bytes {
    let value = this.get("pairAddress");
    return value.toBytes();
  }

  set pairAddress(value: Bytes) {
    this.set("pairAddress", Value.fromBytes(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get reserveBADGER(): BigDecimal {
    let value = this.get("reserveBADGER");
    return value.toBigDecimal();
  }

  set reserveBADGER(value: BigDecimal) {
    this.set("reserveBADGER", Value.fromBigDecimal(value));
  }

  get dailyVolumeToken0(): BigDecimal {
    let value = this.get("dailyVolumeToken0");
    return value.toBigDecimal();
  }

  set dailyVolumeToken0(value: BigDecimal) {
    this.set("dailyVolumeToken0", Value.fromBigDecimal(value));
  }

  get dailyVolumeToken1(): BigDecimal {
    let value = this.get("dailyVolumeToken1");
    return value.toBigDecimal();
  }

  set dailyVolumeToken1(value: BigDecimal) {
    this.set("dailyVolumeToken1", Value.fromBigDecimal(value));
  }

  get dailyVolumeBADGER(): BigDecimal {
    let value = this.get("dailyVolumeBADGER");
    return value.toBigDecimal();
  }

  set dailyVolumeBADGER(value: BigDecimal) {
    this.set("dailyVolumeBADGER", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenDayData", id.toString(), this);
  }

  static load(id: string): TokenDayData | null {
    return store.get("TokenDayData", id) as TokenDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get dailyVolumeToken(): BigDecimal {
    let value = this.get("dailyVolumeToken");
    return value.toBigDecimal();
  }

  set dailyVolumeToken(value: BigDecimal) {
    this.set("dailyVolumeToken", Value.fromBigDecimal(value));
  }

  get dailyVolumeNativeCurrency(): BigDecimal {
    let value = this.get("dailyVolumeNativeCurrency");
    return value.toBigDecimal();
  }

  set dailyVolumeNativeCurrency(value: BigDecimal) {
    this.set("dailyVolumeNativeCurrency", Value.fromBigDecimal(value));
  }

  get dailyVolumeBADGER(): BigDecimal {
    let value = this.get("dailyVolumeBADGER");
    return value.toBigDecimal();
  }

  set dailyVolumeBADGER(value: BigDecimal) {
    this.set("dailyVolumeBADGER", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }

  get totalLiquidityToken(): BigDecimal {
    let value = this.get("totalLiquidityToken");
    return value.toBigDecimal();
  }

  set totalLiquidityToken(value: BigDecimal) {
    this.set("totalLiquidityToken", Value.fromBigDecimal(value));
  }

  get totalLiquidityNativeCurrency(): BigDecimal {
    let value = this.get("totalLiquidityNativeCurrency");
    return value.toBigDecimal();
  }

  set totalLiquidityNativeCurrency(value: BigDecimal) {
    this.set("totalLiquidityNativeCurrency", Value.fromBigDecimal(value));
  }

  get totalLiquidityBADGER(): BigDecimal {
    let value = this.get("totalLiquidityBADGER");
    return value.toBigDecimal();
  }

  set totalLiquidityBADGER(value: BigDecimal) {
    this.set("totalLiquidityBADGER", Value.fromBigDecimal(value));
  }

  get priceBADGER(): BigDecimal {
    let value = this.get("priceBADGER");
    return value.toBigDecimal();
  }

  set priceBADGER(value: BigDecimal) {
    this.set("priceBADGER", Value.fromBigDecimal(value));
  }
}

export class DexswapStakingRewardsFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DexswapStakingRewardsFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DexswapStakingRewardsFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DexswapStakingRewardsFactory", id.toString(), this);
  }

  static load(id: string): DexswapStakingRewardsFactory | null {
    return store.get(
      "DexswapStakingRewardsFactory",
      id
    ) as DexswapStakingRewardsFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initializedCampaignsCount(): i32 {
    let value = this.get("initializedCampaignsCount");
    return value.toI32();
  }

  set initializedCampaignsCount(value: i32) {
    this.set("initializedCampaignsCount", Value.fromI32(value));
  }
}

export class LiquidityMiningCampaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityMiningCampaign entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityMiningCampaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityMiningCampaign", id.toString(), this);
  }

  static load(id: string): LiquidityMiningCampaign | null {
    return store.get(
      "LiquidityMiningCampaign",
      id
    ) as LiquidityMiningCampaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    return value.toBoolean();
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get startsAt(): BigInt {
    let value = this.get("startsAt");
    return value.toBigInt();
  }

  set startsAt(value: BigInt) {
    this.set("startsAt", Value.fromBigInt(value));
  }

  get endsAt(): BigInt {
    let value = this.get("endsAt");
    return value.toBigInt();
  }

  set endsAt(value: BigInt) {
    this.set("endsAt", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get locked(): boolean {
    let value = this.get("locked");
    return value.toBoolean();
  }

  set locked(value: boolean) {
    this.set("locked", Value.fromBoolean(value));
  }

  get stakablePair(): string {
    let value = this.get("stakablePair");
    return value.toString();
  }

  set stakablePair(value: string) {
    this.set("stakablePair", Value.fromString(value));
  }

  get rewardTokens(): Array<string> {
    let value = this.get("rewardTokens");
    return value.toStringArray();
  }

  set rewardTokens(value: Array<string>) {
    this.set("rewardTokens", Value.fromStringArray(value));
  }

  get rewardAmounts(): Array<BigDecimal> {
    let value = this.get("rewardAmounts");
    return value.toBigDecimalArray();
  }

  set rewardAmounts(value: Array<BigDecimal>) {
    this.set("rewardAmounts", Value.fromBigDecimalArray(value));
  }

  get stakedAmount(): BigDecimal {
    let value = this.get("stakedAmount");
    return value.toBigDecimal();
  }

  set stakedAmount(value: BigDecimal) {
    this.set("stakedAmount", Value.fromBigDecimal(value));
  }

  get stakingCap(): BigDecimal {
    let value = this.get("stakingCap");
    return value.toBigDecimal();
  }

  set stakingCap(value: BigDecimal) {
    this.set("stakingCap", Value.fromBigDecimal(value));
  }

  get liquidityMiningPositions(): Array<string> {
    let value = this.get("liquidityMiningPositions");
    return value.toStringArray();
  }

  set liquidityMiningPositions(value: Array<string>) {
    this.set("liquidityMiningPositions", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get withdrawals(): Array<string> {
    let value = this.get("withdrawals");
    return value.toStringArray();
  }

  set withdrawals(value: Array<string>) {
    this.set("withdrawals", Value.fromStringArray(value));
  }

  get claims(): Array<string> {
    let value = this.get("claims");
    return value.toStringArray();
  }

  set claims(value: Array<string>) {
    this.set("claims", Value.fromStringArray(value));
  }

  get recoveries(): Array<string> {
    let value = this.get("recoveries");
    return value.toStringArray();
  }

  set recoveries(value: Array<string>) {
    this.set("recoveries", Value.fromStringArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidityMiningCampaign(): string {
    let value = this.get("liquidityMiningCampaign");
    return value.toString();
  }

  set liquidityMiningCampaign(value: string) {
    this.set("liquidityMiningCampaign", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Withdrawal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Withdrawal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Withdrawal", id.toString(), this);
  }

  static load(id: string): Withdrawal | null {
    return store.get("Withdrawal", id) as Withdrawal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidityMiningCampaign(): string {
    let value = this.get("liquidityMiningCampaign");
    return value.toString();
  }

  set liquidityMiningCampaign(value: string) {
    this.set("liquidityMiningCampaign", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Claim entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Claim entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Claim", id.toString(), this);
  }

  static load(id: string): Claim | null {
    return store.get("Claim", id) as Claim | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidityMiningCampaign(): string {
    let value = this.get("liquidityMiningCampaign");
    return value.toString();
  }

  set liquidityMiningCampaign(value: string) {
    this.set("liquidityMiningCampaign", Value.fromString(value));
  }

  get amounts(): Array<BigDecimal> {
    let value = this.get("amounts");
    return value.toBigDecimalArray();
  }

  set amounts(value: Array<BigDecimal>) {
    this.set("amounts", Value.fromBigDecimalArray(value));
  }
}

export class Recovery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Recovery entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Recovery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Recovery", id.toString(), this);
  }

  static load(id: string): Recovery | null {
    return store.get("Recovery", id) as Recovery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidityMiningCampaign(): string {
    let value = this.get("liquidityMiningCampaign");
    return value.toString();
  }

  set liquidityMiningCampaign(value: string) {
    this.set("liquidityMiningCampaign", Value.fromString(value));
  }

  get amounts(): Array<BigDecimal> {
    let value = this.get("amounts");
    return value.toBigDecimalArray();
  }

  set amounts(value: Array<BigDecimal>) {
    this.set("amounts", Value.fromBigDecimalArray(value));
  }
}

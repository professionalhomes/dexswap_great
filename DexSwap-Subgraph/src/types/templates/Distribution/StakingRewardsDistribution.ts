// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Canceled extends ethereum.Event {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get rewardsTokenAddresses(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get stakableTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardsAmounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get startingTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endingTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get locked(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get stakingCap(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Recovered extends ethereum.Event {
  get params(): Recovered__Params {
    return new Recovered__Params(this);
  }
}

export class Recovered__Params {
  _event: Recovered;

  constructor(event: Recovered) {
    this._event = event;
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakingRewardsDistribution extends ethereum.SmartContract {
  static bind(address: Address): StakingRewardsDistribution {
    return new StakingRewardsDistribution(
      "StakingRewardsDistribution",
      address
    );
  }

  claimedReward(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "claimedReward",
      "claimedReward(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_claimedReward(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimedReward",
      "claimedReward(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  consolidatedRewardsPerStakedToken(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "consolidatedRewardsPerStakedToken",
      "consolidatedRewardsPerStakedToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_consolidatedRewardsPerStakedToken(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consolidatedRewardsPerStakedToken",
      "consolidatedRewardsPerStakedToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedRewards(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "earnedRewards",
      "earnedRewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_earnedRewards(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedRewards",
      "earnedRewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endingTimestamp(): BigInt {
    let result = super.call(
      "endingTimestamp",
      "endingTimestamp():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_endingTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endingTimestamp",
      "endingTimestamp():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastConsolidationTimestamp(): BigInt {
    let result = super.call(
      "lastConsolidationTimestamp",
      "lastConsolidationTimestamp():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastConsolidationTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastConsolidationTimestamp",
      "lastConsolidationTimestamp():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recoverableUnassignedReward(param0: Address): BigInt {
    let result = super.call(
      "recoverableUnassignedReward",
      "recoverableUnassignedReward(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_recoverableUnassignedReward(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recoverableUnassignedReward",
      "recoverableUnassignedReward(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardAmount(param0: Address): BigInt {
    let result = super.call("rewardAmount", "rewardAmount(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewardAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardAmount",
      "rewardAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerStakedToken(param0: Address): BigInt {
    let result = super.call(
      "rewardPerStakedToken",
      "rewardPerStakedToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerStakedToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerStakedToken",
      "rewardPerStakedToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  secondsDuration(): BigInt {
    let result = super.call(
      "secondsDuration",
      "secondsDuration():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_secondsDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "secondsDuration",
      "secondsDuration():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakableToken(): Address {
    let result = super.call("stakableToken", "stakableToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakableToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakableToken",
      "stakableToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedTokenAmount(param0: Address): BigInt {
    let result = super.call(
      "stakedTokenAmount",
      "stakedTokenAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakedTokenAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedTokenAmount",
      "stakedTokenAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedTokensOf(param0: Address): BigInt {
    let result = super.call(
      "stakedTokensOf",
      "stakedTokensOf(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_stakedTokensOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedTokensOf",
      "stakedTokensOf(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingCap(): BigInt {
    let result = super.call("stakingCap", "stakingCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakingCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakingCap", "stakingCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingTimestamp(): BigInt {
    let result = super.call(
      "startingTimestamp",
      "startingTimestamp():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_startingTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingTimestamp",
      "startingTimestamp():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalClaimedRewards(param0: Address): BigInt {
    let result = super.call(
      "totalClaimedRewards",
      "totalClaimedRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalClaimedRewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalClaimedRewards",
      "totalClaimedRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedTokensAmount(): BigInt {
    let result = super.call(
      "totalStakedTokensAmount",
      "totalStakedTokensAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakedTokensAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedTokensAmount",
      "totalStakedTokensAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardTokens(): Array<Address> {
    let result = super.call(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRewardTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getClaimedRewards(_claimer: Address): Array<BigInt> {
    let result = super.call(
      "getClaimedRewards",
      "getClaimedRewards(address):(uint256[])",
      [ethereum.Value.fromAddress(_claimer)]
    );

    return result[0].toBigIntArray();
  }

  try_getClaimedRewards(_claimer: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getClaimedRewards",
      "getClaimedRewards(address):(uint256[])",
      [ethereum.Value.fromAddress(_claimer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  claimableRewards(_staker: Address): Array<BigInt> {
    let result = super.call(
      "claimableRewards",
      "claimableRewards(address):(uint256[])",
      [ethereum.Value.fromAddress(_staker)]
    );

    return result[0].toBigIntArray();
  }

  try_claimableRewards(_staker: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "claimableRewards",
      "claimableRewards(address):(uint256[])",
      [ethereum.Value.fromAddress(_staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _rewardTokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _stakableTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _startingTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _endingTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _locked(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _stakingCap(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class RecoverUnassignedRewardsCall extends ethereum.Call {
  get inputs(): RecoverUnassignedRewardsCall__Inputs {
    return new RecoverUnassignedRewardsCall__Inputs(this);
  }

  get outputs(): RecoverUnassignedRewardsCall__Outputs {
    return new RecoverUnassignedRewardsCall__Outputs(this);
  }
}

export class RecoverUnassignedRewardsCall__Inputs {
  _call: RecoverUnassignedRewardsCall;

  constructor(call: RecoverUnassignedRewardsCall) {
    this._call = call;
  }
}

export class RecoverUnassignedRewardsCall__Outputs {
  _call: RecoverUnassignedRewardsCall;

  constructor(call: RecoverUnassignedRewardsCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimAllCall extends ethereum.Call {
  get inputs(): ClaimAllCall__Inputs {
    return new ClaimAllCall__Inputs(this);
  }

  get outputs(): ClaimAllCall__Outputs {
    return new ClaimAllCall__Outputs(this);
  }
}

export class ClaimAllCall__Inputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimAllCall__Outputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ConsolidateRewardCall extends ethereum.Call {
  get inputs(): ConsolidateRewardCall__Inputs {
    return new ConsolidateRewardCall__Inputs(this);
  }

  get outputs(): ConsolidateRewardCall__Outputs {
    return new ConsolidateRewardCall__Outputs(this);
  }
}

export class ConsolidateRewardCall__Inputs {
  _call: ConsolidateRewardCall;

  constructor(call: ConsolidateRewardCall) {
    this._call = call;
  }
}

export class ConsolidateRewardCall__Outputs {
  _call: ConsolidateRewardCall;

  constructor(call: ConsolidateRewardCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DistributionCreated extends ethereum.Event {
  get params(): DistributionCreated__Params {
    return new DistributionCreated__Params(this);
  }
}

export class DistributionCreated__Params {
  _event: DistributionCreated;

  constructor(event: DistributionCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deployedAt(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakingRewardsFactory extends ethereum.SmartContract {
  static bind(address: Address): StakingRewardsFactory {
    return new StakingRewardsFactory("StakingRewardsFactory", address);
  }

  distributions(param0: BigInt): Address {
    let result = super.call(
      "distributions",
      "distributions(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_distributions(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "distributions",
      "distributions(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDistributionsAmount(): BigInt {
    let result = super.call(
      "getDistributionsAmount",
      "getDistributionsAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDistributionsAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDistributionsAmount",
      "getDistributionsAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokensValidator(): Address {
    let result = super.call(
      "rewardTokensValidator",
      "rewardTokensValidator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rewardTokensValidator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokensValidator",
      "rewardTokensValidator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakableTokenValidator(): Address {
    let result = super.call(
      "stakableTokenValidator",
      "stakableTokenValidator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakableTokenValidator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakableTokenValidator",
      "stakableTokenValidator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardTokensValidatorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakableTokenValidatorAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _implementation(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateDistributionCall extends ethereum.Call {
  get inputs(): CreateDistributionCall__Inputs {
    return new CreateDistributionCall__Inputs(this);
  }

  get outputs(): CreateDistributionCall__Outputs {
    return new CreateDistributionCall__Outputs(this);
  }
}

export class CreateDistributionCall__Inputs {
  _call: CreateDistributionCall;

  constructor(call: CreateDistributionCall) {
    this._call = call;
  }

  get _rewardTokensAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _stakableTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _startingTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _endingTimestmp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _locked(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _stakingCap(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateDistributionCall__Outputs {
  _call: CreateDistributionCall;

  constructor(call: CreateDistributionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardTokensValidatorCall extends ethereum.Call {
  get inputs(): SetRewardTokensValidatorCall__Inputs {
    return new SetRewardTokensValidatorCall__Inputs(this);
  }

  get outputs(): SetRewardTokensValidatorCall__Outputs {
    return new SetRewardTokensValidatorCall__Outputs(this);
  }
}

export class SetRewardTokensValidatorCall__Inputs {
  _call: SetRewardTokensValidatorCall;

  constructor(call: SetRewardTokensValidatorCall) {
    this._call = call;
  }

  get _rewardTokensValidatorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardTokensValidatorCall__Outputs {
  _call: SetRewardTokensValidatorCall;

  constructor(call: SetRewardTokensValidatorCall) {
    this._call = call;
  }
}

export class SetStakableTokenValidatorCall extends ethereum.Call {
  get inputs(): SetStakableTokenValidatorCall__Inputs {
    return new SetStakableTokenValidatorCall__Inputs(this);
  }

  get outputs(): SetStakableTokenValidatorCall__Outputs {
    return new SetStakableTokenValidatorCall__Outputs(this);
  }
}

export class SetStakableTokenValidatorCall__Inputs {
  _call: SetStakableTokenValidatorCall;

  constructor(call: SetStakableTokenValidatorCall) {
    this._call = call;
  }

  get _stakableTokenValidatorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakableTokenValidatorCall__Outputs {
  _call: SetStakableTokenValidatorCall;

  constructor(call: SetStakableTokenValidatorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}
